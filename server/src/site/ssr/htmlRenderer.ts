import { buildHtmlTemplate, getTemplateWithDecorator } from './templateBuilder';
import { ViteDevServer } from 'vite';
// @ts-ignore (this file is generated by vite build)
import { render } from '../../_ssr-dist/main-server';
import { translate } from '../../../../common/breadcrumbs';
import { Locale } from '../../../../common/locale';
import { paths } from '../../../../common/paths';
import { URLSearchParams } from 'url';

export type HtmlRenderer = (url: string) => Promise<string>;

//TODO duplikat
export const validLocales: Locale[] = ['nb', 'en', 'nn']; // :(
export const defaultLocale = 'nb' as Locale;
export const isLocale = (str: string): str is Locale =>
    validLocales.includes(str as Locale);

function getLocaleFromUrl(url: string) {
    // Regular expression to match the language code pattern in the URL
    //TODO bruk variabel for paths.kontaktOss.forside
    const regex = /\/kontakt-oss\/([a-z]{2})\//;

    // Using regex to find the language code
    const match = url.match(regex);

    // Check if a match is found, and return the language code
    if (match && match[1]) {
        return match[1];
    } else {
        // Return null or an appropriate default if no match is found
        return defaultLocale;
    }
}

const processTemplate = async (
    templateHtml: string,
    appHtml: string,
    url: string
) => {
    console.log(`Processing template for url: ${url}`);
    console.log('getLocaleFromUrl(url)', getLocaleFromUrl(url));
    console.log(
        translate(
            getLocaleFromUrl(url) as Locale,
            'seo.feilogmangler.description'
        )
    );

    return templateHtml
        .replace('<!--ssr-app-html-->', appHtml)
        .replace('%%TITLE%%', 'Testtittel')
        .replace(
            '%%DESCRIPTION%%',
            // translate(getLocaleFromUrl(), 'seo.feilogmangler.description')
            translate(
                getLocaleFromUrl(url) as Locale,
                'seo.feilogmangler.description'
            )
        );
};

//         {descriptionId && (
//             <meta
//                 name="description"
//                 content={intl.formatMessage({ id: descriptionId })}
//             />
//         )}

export const prodRender: HtmlRenderer = async (url) => {
    console.log(`Rendering url: ${url}`);
    const template = await getTemplateWithDecorator(url);

    try {
        //TODO bruk await? brukt i nav-office-search
        const appHtml = render(url);
        console.log(`App html: ${appHtml.slice(0, 200)}`);

        return processTemplate(template, appHtml, url);
    } catch (e) {
        console.error(`Rendering failed ${e}}`);
        return processTemplate(template, '', url);
    }
};

const devErrorHtml = (e: Error) => {
    return `
        <div style='max-width: 1344px;width: 100%;margin: 1rem auto'>
            <span>Server rendering error: ${e}</span>
            <div style='font-size: 0.75rem; margin-top: 1rem'>
                <code>${e.stack}</code>
            </div>
        </div>`;
};

export const devRender =
    (vite: ViteDevServer): HtmlRenderer =>
    async (url) => {
        const template = await buildHtmlTemplate();
        const html = await vite.transformIndexHtml(url, template);

        try {
            const { render } = await vite.ssrLoadModule('/src/main-server.tsx');
            const appHtml = render(url);
            return processTemplate(html, appHtml, url);
        } catch (e: any) {
            vite.ssrFixStacktrace(e);
            console.error(`Dev render error: ${e} \n ${e.stack}`);
            return processTemplate(html, devErrorHtml(e), url);
        }
    };
